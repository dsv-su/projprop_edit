<?php

// Cancelled proposals cannot be edited.
function projprop_edit_node_access($node, $op, $account) {
	if ($op == 'update') {
		if ($node->field_cancelled['und'][0]['value']) {
			return NODE_ACCESS_DENY;
		}
	}
}

/**
 * Value callback for a user_reference autocomplete element.
 *
 * Substitute in the user name for the uid.
 */
function projprop_edit_autocomplete_value($element, $input = FALSE, $form_state) {
  if ($input === FALSE) {
    // We're building the displayed 'default value': expand the raw uid into
    // "realname [username]".
    $uid = $element['#default_value'];
    if (!empty($uid)) {
      $q = db_select('users', 'u');
      $q->join('realname', 'r', 'u.uid = r.uid');
      $q->addField('u', 'name');
      $q->addField('r', 'realname');
      $q->condition('u.uid', $uid)
        ->range(0, 1);
      $result = $q->execute();
      // @todo If no result (user doesn't exist).
      $value = $result->fetchAll();
      return $value[0]->realname.' [' . $value[0]->name . ']';
    }
  }
}

/**
 * Validation callback for a user_reference autocomplete element.
 */
function projprop_edit_autocomplete_validate($element, &$form_state, $form) {
  $field = field_widget_field($element, $form_state);
  $instance = field_widget_instance($element, $form_state);

  $value = $element['#value'];
  $uid = NULL;

  if (!empty($value)) {
    // Check whether we have an explicit "[username@su.se]" input.
    preg_match('/^(?:\s*|(.*) )?\[\s*(.+@[^\.].*\.[a-z]{2,})\s*\]$/', $value, $matches);
    if (!empty($matches)) {
      list(, $realname, $name) = $matches;
      if (!empty($name)) {
        if ($realname == user_load_by_name($name)->realname) {
			$uid = user_load_by_name($name)->uid;
        } else {
			form_error($element, t('%name: name mismatch. Please check your selection.', array('%name' => $instance['label'])));
        }
      }
    }
    else {
      // No explicit uid (the submitted value was not populated by autocomplete
      // selection). Get the uid of a referencable user from the entered name.
      $options = array(
        'string' => $value,
        'match' => 'equals',
        'limit' => 1,
      );
      $references = user_reference_potential_references($field, $options);
      if ($references) {
        $uid = key($references);
      }
      else {
        form_error($element, t('%name: found no valid user with that name.', array('%name' => $instance['label'])));
      }
    }
  }

  // Set the element's value as the user id that was extracted from the entered
  // input.
  form_set_value($element, $uid, $form_state);
}

function projprop_edit_user_view_alter(&$build) {
	$build['proposals'] = array('#field_type' => 'text', '#field_name' => 'TEST', '#title' => 'TEST2');
	$main_researcher_links = '';
	$coaaplicant_links = '';

	$nodes = node_load_multiple(array(), array('type' => 'project_proposal'));
	$query = db_select('node', 'n');
	$query->join('field_data_field_dsv_person_in_charge', 'p', 'n.nid = p.entity_id');
	$query
		->fields('n', array('nid', 'title', 'created'))
		->condition('n.type', 'project_proposal')
		->condition('n.status', '1')
		->condition('p.field_dsv_person_in_charge_uid', $build['#account']->uid)
		->orderBy('n.created', 'DESC');
	$main_researcher = $query->execute();

	foreach ($main_researcher as $record) {
		$nid = $record->nid;
		$position = array_search($nid, array_keys($nodes)) + 1;
		$offset = floor((count($nodes) - $position) / 10);
		$link = l($record->title , 'proposals', array('query' => array('page' => $offset), 'fragment' => 'node-'.$nid));
		$main_researcher_links .= $link . ' ('.format_date($record->created, 'without_time').')</br>';
	}

	$build['proposals'][0]['#markup'] = "<dl><div class=\"field\"><div class=\"field-label\">"
		. t('Main researcher in') . ":&nbsp;</div><div class=\"field-items\"><div class=\"field-item even\">"
		. $main_researcher_links . "</div></div></div></dl>";

	$query = db_select('node', 'n');
	$query->join('field_data_field_coapplicants', 'c', 'n.nid = c.entity_id');
	$query
		->fields('n', array('nid', 'title', 'created'))
		->condition('n.type', 'project_proposal')
		->condition('n.status', '1')
		->condition('c.field_coapplicants_uid', $build['#account']->uid)
		->orderBy('n.created', 'DESC');
	$coaaplicant = $query->execute();

	foreach ($coaaplicant as $record) {
		$nid = $record->nid;
		$position = array_search($nid, array_keys($nodes)) + 1;
		$offset = floor((count($nodes) - $position) / 10);
		$link = l($record->title , 'proposals', array('query' => array('page' => $offset), 'fragment' => 'node-'.$nid));
		$coaaplicant_links .= $link . ' ('.format_date($record->created, 'without_time').')</br>';;
  }

	$build['coaaplicant'][0]['#markup'] = "<dl><div class=\"field\"><div class=\"field-label\">"
		. t('Co-applicant in') . ":&nbsp;</div><div class=\"field-items\"><div class=\"field-item even\">"
		. $coaaplicant_links . "</div></div></div></dl>";

	$build['proposals']['#weight'] = -1;
	$build['coaaplicant']['#weight'] = -1;
}

function projprop_edit_extra_validate(&$form, &$form_state) {
	$oldfilesFIDs = (isset($form_state['storage']['attachments']) ? $form_state['storage']['attachments'] : array());
	$oldfilesFIDs[] = 0; // we add this because new files suddenly lists a file with fid = 0.. weird!

	if ($form_state['values']['field_attachments']['und']) {
		$newfilesFIDs = array_map(create_function('$o', 'return $o["fid"];'), $form_state['values']['field_attachments']['und']);
	} else {
		$newfilesFIDs = array();
	}

	$diff = array_diff($newfilesFIDs, $oldfilesFIDs);

	//if (true) { //for test!!!!!!!!
	if (!isset($form_state['storage']['confirm']) && !empty($diff) && $form_state['storage']['field_ok_from_dsv_economy'])
	{
		$form_state['storage']['changed'] = TRUE;
		$form_state['storage']['confirm'] = TRUE; // this will cause the form to be rebuilt, entering the confirm part of the form
		$form_state['rebuild'] = TRUE; // along with this
		return false;
	} else {
		$form_state['storage']['changed'] = FALSE;
		return true;
	}
}

function projprop_edit_form_submit_changed(&$form, &$form_state) {
	// Flush Economy's OK and add Request to Economy.
	$form['field_request_to_dsv_economy']['#parents'] = array('field_request_to_dsv_economy');
	form_set_value($form['field_request_to_dsv_economy'], array('und' => array(0 => array('value' => 1))), $form_state);
	$form['field_ok_from_dsv_economy']['#parents'] = array('field_ok_from_dsv_economy');
	form_set_value($form['field_ok_from_dsv_economy'], array('und' => array(0 => array('value' => 0))), $form_state);

	node_form_submit($form, $form_state);
	$url = 'proposals';
	drupal_goto($url);
	return true;
}

function projprop_edit_form_submit_not_changed(&$form, &$form_state) {
	node_form_submit($form, $form_state);
	$url = 'proposals';
	drupal_goto($url);
	return true;
}

function projprop_edit_confirm_attachment_form($form, $question, $path, $description, $yes, $no, $cancel, $name = 'confirm') {
	$description = isset($description) ? $description : t('This action cannot be undone.');

	// Prepare cancel link.
	if (isset($_GET['destination'])) {
		$options = drupal_parse_url($_GET['destination']);
	} elseif (is_array($path)) {
		$options = $path;
	} else {
		$options = array('path' => $path);
	}

	drupal_set_title($question, PASS_THROUGH);

	$form['#attributes']['class'][] = 'confirmation';
	$form['description'] = array('#markup' => $description);
	$form[$name] = array('#type' => 'hidden', '#value' => 1);

	$form['actions'] = array('#type' => 'actions');
	$form['actions']['submit_yes'] = array(
		'#type' => 'submit',
		'#value' => $yes ? $yes : t('Confirm budget is changed'),
	);
	$form['actions']['submit_no'] = array(
		'#type' => 'submit',
		'#value' => $no ? $no : t('Confirm budget is NOT changed'),
	);
	$form['actions']['cancel'] = array(
		'#type' => 'link',
		'#title' => $cancel ? $cancel : t('Cancel'),
		'#href' => $options['path'],
		'#options' => $options,
	);
	// By default, render the form using theme_confirm_form().
	if (!isset($form['#theme'])) {
		$form['#theme'] = 'confirm_form';
	}
	return $form;
}

function projprop_edit_form_node_form_alter(&$form, &$form_state, $form_id) {
	global $user;

	$node = isset($form['#node']->title) ? $form['#node'] : null;

	$editable = false;
	$economy = false;
	$unithead = false;
	$vicehead = false;
	$admin = false;

	if(!isset($form_state['storage']['changed'])) {
		$form['#validate'][] = 'projprop_edit_extra_validate';
		if (isset($node->field_attachments['und']) && $node->field_attachments['und']) {
			$oldfilesFIDs = array_map(create_function('$o', 'return $o["fid"];'), $node->field_attachments['und']);
		}
		$form_state['storage']['attachments'] = isset($oldfilesFIDs) ? $oldfilesFIDs : NULL;
		if (isset($node->field_ok_from_dsv_economy['und']) && $node->field_ok_from_dsv_economy['und'][0]['value'] == 1) {
			$form_state['storage']['field_ok_from_dsv_economy'] = TRUE;
		}
	} else {
		$form = projprop_edit_confirm_attachment_form(
			$form,
			'New attachment(s) has been found',
			substr($form['#action'],1),
			'','Budget changed','Budget NOT changed','Cancel'
		);
		// The following is a must. without it, confirm form will not create node.
		$form['actions']['submit_yes']['#submit'][] = 'projprop_edit_form_submit_changed';
		$form['actions']['submit_no']['#submit'][] = 'projprop_edit_form_submit_not_changed';

		// Hide all fields except attachments so they're not show to user, but values are saved. Ugly...
		//$form['title']['#access'] = FALSE;
		foreach ($form as $field_name => $value) {
			if (strpos($field_name, 'field_') === 0 && $field_name <> 'field_attachments') {
       				$form[$field_name]['#prefix'] = '<div style="display:none;">';
					$form[$field_name]['#suffix'] = '</div>';
    		}
		}

		// Some fields tend to lose data, e.g. title. to fix this add the following:
		$form['title']['#default_value'] = $form_state['values']['title'];

		// All entered data is in form_state, so you can fill them manually.
		// WARNING : CHECK FOR DATA LOSS!!!!!!!
	}

    $form['field_dsv_person_in_charge'][LANGUAGE_NONE][0]['uid']['#autocomplete_path'] = 'realname/autocomplete';
    $form['field_dsv_person_in_charge'][LANGUAGE_NONE][0]['uid']['#value_callback'] = 'projprop_edit_autocomplete_value';
    $form['field_dsv_person_in_charge'][LANGUAGE_NONE][0]['uid']['#element_validate'] = array('projprop_edit_autocomplete_validate');
	foreach ($form['field_coapplicants'][LANGUAGE_NONE] as $key => $value) {
		if (is_numeric($key)) {
			$form['field_coapplicants'][LANGUAGE_NONE][$key]['uid']['#autocomplete_path'] = 'realname/autocomplete';
			$form['field_coapplicants'][LANGUAGE_NONE][$key]['uid']['#value_callback'] = 'projprop_edit_autocomplete_value';
			$form['field_coapplicants'][LANGUAGE_NONE][$key]['uid']['#element_validate'] = array('projprop_edit_autocomplete_validate');
		}
	}

	db_insert('login_history')
	->fields(array(
		'uid' => $user->uid,
		'login' => time(),
		'hostname' => ip_address()
	))
	->execute();

	if (isset($user->roles[3])) {
		// User is an administrator
		$editable = true;
		return;
	} else if (isset($user->roles[5])) {
		// User is the vice prefect
		$editable = true;
		$vicehead = true;
	} else if (isset($user->roles[6])) {
		// User is the institution secretary
		$editable = true;
	} else if (isset($user->roles[7])) {
		// User is the unit head
		$editable = true;
		$unithead = true;
	} else if (isset($user->roles[8])) {
		// User is Economy
		$economy = true;
		$editable = true;
	}

	// Hide 'Funding approved' for non-admins
	unset($form['field_approved_funding']);

	// Hide 'Remove' buttons from respective file pickers for just ordinary users
	if (!$economy && !$vicehead && isset($node->field_ok_from_dsv_economy) && $node->field_ok_from_dsv_economy['und'][0]['value']) {
		$form['field_attachments']['#attributes']['class'][] = 'hide-remove-button';
	}

	if (isset($form_state['storage']['changed'])) {
		$form['field_attachments']['#attributes']['class'][] = 'hide-remove-button';
		$form['field_attachments']['#attributes']['class'][] = 'hide-upload-button';
		$form['field_attachments']['#attributes']['class'][] = 'black-help-font';

		$form['field_attachments']['und']['#description'] = '
			<style="color:#000000">You are about to edit the proposal\'s attachments that have already been agreed by DSV economy. It is important that DSV economy is aware if the financial information is changed. Please therefore confirm whether you have changed the budget information or not.</style>';
	}

	if (!$editable) {
		$form['field_dsv_person_in_charge']['#disabled'] = TRUE;
	}
	unset($form['field_cancelled']);
	unset($form['field_request_to_dsv_economy']);
	unset($form['field_request_to_vice_head']);
	unset($form['field_sent_to_birgitta_o']);
	unset($form['field_economy_owner']);
	unset($form['field_ok_from_unit_head']);
	unset($form['field_ok_from_dsv_economy']);
	unset($form['field_ok_from_uno']);

	// Make conversation fields disabled
	$form['field_conversation']['#disabled'] = TRUE;

	// Hide revision logs
	$form['revision_information']['#access'] = FALSE;

	// Remove 'delete' button.
	$form['actions']['delete']['#access'] = FALSE;

	// Remove 'preview' button.
	$form['actions']['preview']['#access'] = FALSE;

	$form['actions']['cancel'] = array(
		'#type' => 'submit',
		'#value' => t('Cancel'),
		'#access' => TRUE,
		'#weight' => 20,
		'#submit' => array('projprop_form_cancel', 'node_form_submit_build_node')
	);

	// Set Author/Researcher to be a current user.
	if (!isset($node->field_dsv_person_in_charge)) {
		$form['field_dsv_person_in_charge']['und'][0]['uid']['#default_value'] = $user->uid;
	}

	$form['field_comment']['und'][0]['value']['#title'] = 'Your comments';
	// Hide conversation_unit_head if it is a fresh node.
	if (!$node) {
		unset($form['field_conversation']);
		$form['field_comment']['und'][0]['value']['#title'] .= ' (you can describe your proposal here)';
	}

	// After Economy OK
	if (isset($node->field_ok_from_dsv_economy) && $node->field_ok_from_dsv_economy['und'][0]['value'] && !$economy && !$vicehead) {
		$form['field_is_dsv_coordinating']['#disabled'] = TRUE;
		$form['field_require_forskningsservice']['#disabled'] = TRUE;
		$form['field_other_coordinator']['#disabled'] = TRUE;
		$form['field_funding_organization']['#disabled'] = TRUE;
		$form['field_deadline']['#disabled'] = TRUE;
		$form['field_duration']['#disabled'] = TRUE;
		$form['field_total_budget_amount_for_co']['#disabled'] = TRUE;
		$form['field_total_budget_amount_for_ds']['#disabled'] = TRUE;
		$form['field_currency']['#disabled'] = TRUE;
		$form['field_co_financing_needed']['#disabled'] = TRUE;
		$form['field_co_financing_covered_by']['#disabled'] = TRUE;
		$form['field_percent_oh_costs_covered']['#disabled'] = TRUE;
	}

	// Lock Unit Head once he/she is OK
	if (isset($node->field_ok_from_unit_head) && $node->field_ok_from_unit_head['und'][0]['value']) {
		$form['field_unit_head']['#disabled'] = TRUE;
	}

	return true;
}

/**
 * Custom cancel button callback.
 */
function projprop_form_cancel($form, &$form_state) {
  $url = 'proposals';
  drupal_goto($url);
}

/**
* Implementation of hook_node_prepare().
**/
function projprop_edit_node_load($node) {
	$node_is_edited = strpos(request_path(), 'edit') !== FALSE;
	if ($node_is_edited) {
		$node[array_keys($node)[0]]->field_comment = NULL;
	}
}

/**
* Implementation of hook_node_presave().
**/
function projprop_edit_node_presave($node) {
	global $user;
	$user = user_load($user->uid);

	if ($node->field_comment['und']) {
		//$node->field_comment = NULL;
		$comment = $node->field_comment['und'][0]['value'];
		$date = format_date(time(), 'medium');
		$string_to_append = $user->realname . ' on ' .$date . ': ' . "\r\n" . $comment . "\r\n\r\n" . '----------------------' . "\r\n\r\n";
		$node->field_conversation['und'][0]['value'] = $string_to_append . (isset($node->field_conversation) ? $node->field_conversation['und'][0]['value'] : '');
	}

//var_dump($node->field_comments_to_unit_head);
//break;
	
/*
	if (isset($user->roles[5])) {
		// User is the vice head

	} else if (isset($user->roles[7])) {
		// User is the unit head
		$string_to_append = $user->realname . ' on ' .$date . ': ' . "\r\n" . $comment . "\r\n\r\n" . '----------------------' . "\r\n\r\n";
		$node->field_conversation_unit_head['und'][0]['value'] = $string_to_append . $node->field_conversation_unit_head['und'][0]['value'];
	} else if (isset($user->roles[8])) {
		// User is Economy
		$string_to_append = $user->realname . ' on ' .$date . ': ' . "\r\n" . $comment . "\r\n\r\n" . '----------------------' . "\r\n\r\n";
		$node->field_conversation_dsv_economy['und'][0]['value'] = $string_to_append . $node->field_conversation_dsv_economy['und'][0]['value'];

	}
*/

}

/**
* Implementation of hook_menu().
**/
function projprop_edit_menu() {
  $items['node/approve/%node'] = array(
    'page arguments' => array(1),
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
    'delivery callback' => 'projprop_edit_callback',  // Magic goes here
  );
  $items['node/cancel/%node'] = array(
  	'page arguments' => array(1),
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
    'delivery callback' => 'projprop_edit_callback',  // Magic goes here
  );
   $items['node/economy-own/%node'] = array(
    'page arguments' => array(1),
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
    'delivery callback' => 'projprop_edit_callback',  // Magic goes here
  );
  return $items;
}

function projprop_edit_callback($node) {
	global $user;
	$user = user_load($user->uid);
	$data = array(true);
	$node = node_load(arg(2));
	$approvalby = arg(3);
	$researcher = $node->field_dsv_person_in_charge[LANGUAGE_NONE][0]['uid'];

	// Only Proposal nodes are allowed!
	if ($node->type != 'project_proposal') {
		return t('Invalid node type!');
	}

	$node->field_comment = NULL;

	switch (arg(3)) {
		case 'own':
			$node->field_economy_owner[LANGUAGE_NONE][0]['uid'] = $user->uid;
			$data = $user->realname;
			$action_string = 'assigned him/herself the proposal';
			break;
		case 'unown':
			$node->field_economy_owner[LANGUAGE_NONE][0]['uid'] = null;
			$data = 'not yet assigned';
			$action_string = 'unassigned him/herself from the proposal';
			break;
		case 'cancel':
			$node->field_cancelled[LANGUAGE_NONE][0]['value'] = 1;
			$action_string = 'cancelled the proposal';
			break;
		case 'uncancel':
			$node->field_cancelled[LANGUAGE_NONE][0]['value'] = 0;
			$action_string = 're-activated the proposal';
			break;
		case 'unit-head':
			if (!isset($user->roles[7]) && !isset($user->roles[3])) {
				drupal_json_output(false);
			}
			$action_string = '(Unit Head) approved the proposal';
			$node->field_ok_from_unit_head[LANGUAGE_NONE][0]['value'] = 1;
			break;
		case 'request-dsv-economy':
			if (!($user->uid == $researcher) && !isset($user->roles[3])) {
				drupal_json_output(false);
			}
			$action_string = 'requested the proposal\'s approval by DSV Economy';
			$node->field_request_to_dsv_economy[LANGUAGE_NONE][0]['value'] = 1;
			break;
		case 'dsv-economy':
			if (!isset($user->roles[8]) && !isset($user->roles[3])) {
				drupal_json_output(false);
			}
			$action_string = '(DSV Economy) approved the proposal';
			$node->field_ok_from_dsv_economy[LANGUAGE_NONE][0]['value'] = 1;
			break;
		case 'request-vice-head':
			if (!($user->uid == $researcher) && (!isset($user->roles[3])) && (!isset($user->roles[5])) && (!isset($user->roles[6])) && (!isset($user->roles[7])) && (!isset($user->roles[8]))) {
				drupal_json_output(false);
			}
			$action_string = 'requested the proposal\'s approval by Vice Head';
			$node->field_request_to_vice_head[LANGUAGE_NONE][0]['value'] = 1;
			break;
		case 'vice-head':
			if (!isset($user->roles[5]) && !isset($user->roles[3])) {
				drupal_json_output(false);
			}
			$action_string = '(Vice Head) approved the proposal';
			$node->field_ok_from_uno[LANGUAGE_NONE][0]['value'] = 1;
			break;
		case 'final':
			if (!($user->uid == $researcher) && !isset($user->roles[5]) && !isset($user->roles[3]) ) {
				drupal_json_output(false);
			}
			$action_string = 'sent the proposal to Registrator';
			$node->field_sent_to_birgitta_o[LANGUAGE_NONE][0]['value'] = 1;
			break;
		case 'funding-yes':
			if (!($user->uid == $researcher) && !isset($user->roles[5]) && !isset($user->roles[3])) {
				drupal_json_output(false);
			}
			$action_string = 'reported that the proposal has been granted funding';
			$node->field_approved_funding[LANGUAGE_NONE][0]['value'] = 1;
			break;
		case 'funding-no':
			if (!($user->uid == $researcher) && !isset($user->roles[5]) && !isset($user->roles[3])) {
				drupal_json_output(false);
			}
			$action_string = 'reported that the proposal has NOT been granted funding';
			$node->field_approved_funding[LANGUAGE_NONE][0]['value'] = 0;
			break;
		default:
			break;
	}

	$date = format_date(time(), 'medium');
	$string_to_append = '*status changed* ' . "\r\n" . $user->realname . ' ' . $action_string . ' on ' . $date . "\r\n\r\n" . '----------------------' . "\r\n\r\n";
	$node->field_conversation['und'][0]['value'] = $string_to_append . (isset($node->field_conversation) ? $node->field_conversation['und'][0]['value'] : '');

	node_save($node);
	drupal_json_output($data);
}

/**
 * Implements hook_menu_alter().
 */
function projprop_edit_menu_alter(&$items) {
	// Hive 'View' tab on node edit view.
	$items['node/%node/edit']['type'] = MENU_CALLBACK;
}

/**
 * Implements hook_menu()
 * @author Simon Jarbrant (simon@dsv.su.se)
 */
/*
function projprop_edit_menu() {
	$items['edit/%node'] = array(
		'title' => 'ProjProp Edit',
		'page callback' => 'projprop_edit_page',
		'page arguments' => array(1),
		'access callback' => TRUE,
		// 'access arguments' => array('project proposal edit own content'),
	);

	return $items;
}
*/
/**
 * Delivery callback for /edit/nid
 */
/*
function projprop_edit_page($node) {
	// Only Proposal nodes are allowed!
	if ($node->type != 'project_proposal') {
		return t('Invalid node type!');
	}
	// Create associative array and send to drupal_json_output()
	$data = array();
	$data['edit-proposalform-proposal-edit-node'] = $node->nid;
	$data['edit-proposalform-proposal-title'] = $node->title;

	// Load the author
	if (isset($node->field_dsv_person_in_charge[LANGUAGE_NONE])) {
		$author = user_load($node->field_dsv_person_in_charge[LANGUAGE_NONE][0]['uid']);
		$data['edit-proposalform-proposal-dsv-person-in-charge'] = $author->name;
	} else {
		$data['edit-proposalform-proposal-dsv-person-in-charge'] = "";
	}

	// We only need the deadline date, which is the first 10 characters
	$data['edit-proposalform-proposal-deadline-datepicker-popup-0'] =
		substr($node->field_deadline[LANGUAGE_NONE][0]['value'], 0, 10);

	// Load "Duration" and "Is DSV coordinating"
	$data['edit-proposalform-proposal-duration'] = $node->field_duration[LANGUAGE_NONE][0]['value'];
	$data['edit-proposalform-proposal-is-dsv-coordinating'] =
		$node->field_is_dsv_coordinating[LANGUAGE_NONE][0]['value'];

	// Load "Other coordinator"
	if (isset($node->field_other_coordinator[LANGUAGE_NONE])) {
		$data['edit-proposalform-proposal-other-coordinator'] =
			$node->field_other_coordinator[LANGUAGE_NONE][0]['value'];
	} else {
		$data['edit-proposalform-proposal-other-coordinator'] = "";
	}

	// Load "Program/Call/Target"
	if (isset($node->field_program_call_target[LANGUAGE_NONE])) {
		$data['edit-proposalform-proposal-program-call-target'] =
			$node->field_program_call_target[LANGUAGE_NONE][0]['value'];
	} else {
		$data['edit-proposalform-proposal-program-call-target'] = "";
	}

	// Load "Co-financing needed"
	$data['edit-proposalform-proposal-co-financing-needed'] =
		$node->field_co_financing_needed[LANGUAGE_NONE][0]['value'];

	// Load "Co-financing covered by"
	if (isset($node->field_co_financing_covered_by[LANGUAGE_NONE])) {
		$data['edit-proposalform-proposal-co-financing-covered-by'] =
			$node->field_co_financing_covered_by[LANGUAGE_NONE][0]['value'];
	} else {
		$data['edit-proposalform-proposal-co-financing-covered-by'] = "";
	}

	// Load "Percent OH-costs sovered"
	if (isset($node->field_percent_oh_costs_covered[LANGUAGE_NONE])) {
		$data['edit-proposalform-proposal-percent-oh-costs-covered'] =
			$node->field_percent_oh_costs_covered[LANGUAGE_NONE][0]['value'];
	} else {
		$data['edit-proposalform-proposal-percent-oh-costs-covered'] = 0;
	}

	// Load the funding organisation
	if (isset($node->field_funding_organization[LANGUAGE_NONE])) {
		$organization =
			taxonomy_term_load($node->field_funding_organization[LANGUAGE_NONE][0]['tid']);
		$data['edit-proposalform-proposal-funding-organization'] = $organization->name;
	} else {
		$data['edit-proposalform-proposal-funding-organization'] = "";
	}

	// Load budgets
	if (isset($node->field_total_budget_amount_for_co[LANGUAGE_NONE])) {
		$data['edit-proposalform-proposal-total-budget-amount-for-co'] =
			$node->field_total_budget_amount_for_co[LANGUAGE_NONE][0]['value'];
	} else {
		$data['edit-proposalform-proposal-total-budget-amount-for-co'] = 0;
	}

	if (isset($node->field_total_budget_amount_for_ds[LANGUAGE_NONE])) {
		$data['edit-proposalform-proposal-total-budget-amount-for-ds'] =
			$node->field_total_budget_amount_for_ds[LANGUAGE_NONE][0]['value'];
	} else {
		$data['edit-proposalform-proposal-total-budget-amount-for-ds'] = 0;
	}

	// Load attachments
	if (isset($node->field_attachment_unit[LANGUAGE_NONE])) {
		if (!is_array($node->field_attachment_unit[LANGUAGE_NONE])) {
			$node->field_attachment_unit[LANGUAGE_NONE] = (array)$node->field_attachment_unit[LANGUAGE_NONE];
		}
		$files = array();
		foreach ($node->field_attachment_unit[LANGUAGE_NONE] as $key => $value) {
				$file = file_load($value['fid']);
				$uri = $file->uri;
				$url = file_create_url($uri);
				$filename = $file->filename;
				$files[] = array($filename, $url);
		}
		$data['edit-proposalform-proposal-attachment-unit-upload'] = $files;
	} else {
		$data['edit-proposalform-proposal-attachment-unit'] = 0;
	}

	// Load "Currency", "OK from DSV Economy", "Forskningsservice informed", "OK from Uno" and "Sent to Birgitta O"
	$data['edit-proposalform-proposal-currency'] =
		$node->field_currency[LANGUAGE_NONE][0]['value'];
	$data['edit-proposalform-proposal-ok-from-dsv-economy'] =
		$node->field_ok_from_dsv_economy[LANGUAGE_NONE][0]['value'];
	$data['edit-proposalform-proposal-forskningsservice-informed'] =
		$node->field_forskningsservice_informed[LANGUAGE_NONE][0]['value'];
	$data['edit-proposalform-proposal-ok-from-uno'] = $node->field_ok_from_uno[LANGUAGE_NONE][0]['value'];
	$data['edit-proposalform-proposal-ok-from-unit-head'] = $node->field_ok_from_unit_head[LANGUAGE_NONE][0]['value'];
	$data['edit-proposalform-proposal-sent-to-birgitta-o'] = $node->field_sent_to_birgitta_o[LANGUAGE_NONE][0]['value'];

	// Generate JSON and return to caller
	drupal_json_output($data);
}
*/