<?php

// Cancelled proposals cannot be edited.
function projprop_edit_node_access($node, $op, $account) {
	if ($op == 'update') {
		if ($node->field_cancelled['und'][0]['value']) {
			return NODE_ACCESS_DENY;
		}
	}
}

function projprop_edit_form_node_form_alter(&$form, &$form_state, $form_id) {
	global $user;

	$node = isset($form['#node']->title) ? $form['#node'] : null;

	$editable = false;
	$economy = false;
	$unithead = false;
	$vicehead = false;
	$admin = false;

    $form['field_dsv_person_in_charge'][LANGUAGE_NONE][0]['uid']['#autocomplete_path'] = 'realname/autocomplete';
    $form['field_coapplicants'][LANGUAGE_NONE][0]['uid']['#autocomplete_path'] = 'realname/autocomplete';

	db_insert('login_history')
	->fields(array(
		'uid' => $user->uid,
		'login' => time(),
		'hostname' => ip_address()
	))
	->execute();

	if (isset($user->roles[3])) {
		// User is an administrator
		$editable = true;
		return;
	} else if (isset($user->roles[5])) {
		// User is the vice prefect
		$editable = true;
		$vicehead = true;
	} else if (isset($user->roles[6])) {
		// User is the institution secretary
		$editable = true;
	} else if (isset($user->roles[7])) {
		// User is the unit head
		$editable = true;
		$unithead = true;
	} else if (isset($user->roles[8])) {
		// User is Economy
		$economy = true;
		$editable = true;
	}

	// Hide 'Remove' buttons from respective file pickers for just ordinary users
	if (!$economy && !$vicehead) {
		$form['field_attachments']['#attributes']['class'][] = 'hide-remove-button';
	}

	if (!$editable) {
		$form['field_dsv_person_in_charge']['#disabled'] = TRUE;
	}
	unset($form['field_cancelled']);
	unset($form['field_request_to_dsv_economy']);
	unset($form['field_request_to_vice_head']);
	unset($form['field_sent_to_birgitta_o']);
	unset($form['field_economy_owner']);
	unset($form['field_ok_from_unit_head']);
	unset($form['field_ok_from_dsv_economy']);
	unset($form['field_ok_from_uno']);

	// Make conversation fields disabled
	$form['field_conversation']['#disabled'] = TRUE;

	// Hide revision logs
	$form['revision_information']['#access'] = FALSE;

	// Remove 'delete' button.
	$form['actions']['delete']['#access'] = FALSE;

	// Remove 'preview' button.
	$form['actions']['preview']['#access'] = FALSE;

	$form['actions']['cancel'] = array(
		'#type' => 'submit',
		'#value' => t('Cancel'),
		'#access' => TRUE,
		'#weight' => 20,
		'#submit' => array('projprop_form_cancel', 'node_form_submit_build_node')
	);

	// Set Author/Researcher to be a current user.
	if (!isset($node->field_dsv_person_in_charge)) {
		$form['field_dsv_person_in_charge']['und'][0]['uid']['#default_value'] = $user->uid;
	}

	$form['field_comment']['und'][0]['value']['#title'] = 'Your comments';
	// Hide conversation_unit_head if it is a fresh node.
	if (!$node) {
		unset($form['field_conversation']);
		$form['field_comment']['und'][0]['value']['#title'] .= ' (you can describe your proposal here)';
	}

	// Before Unit Head OK
	// Unset some fields
	/*
	if (!$node || (isset($node->field_ok_from_unit_head) && !$node->field_ok_from_unit_head['und'][0]['value']) || $unithead) {
		unset($form['field_is_dsv_coordinating']);
		unset($form['field_require_forskningsservice']);
		unset($form['field_other_coordinator']);
		unset($form['field_funding_organization']);
		unset($form['field_program_call_target']);
		unset($form['field_deadline']);
		unset($form['field_duration']);
		unset($form['field_total_budget_amount_for_co']);
		unset($form['field_total_budget_amount_for_ds']);
		unset($form['field_currency']);
		unset($form['field_co_financing_needed']);
		unset($form['field_forskningsservice_informed']);
		unset($form['field_co_financing_covered_by']);
		unset($form['field_percent_oh_costs_covered']);
	}
	*/

	// After Economy OK
	if (isset($node->field_ok_from_dsv_economy) && $node->field_ok_from_dsv_economy['und'][0]['value'] && !$economy && !$vicehead) {
		$form['field_is_dsv_coordinating']['#disabled'] = TRUE;
		$form['field_require_forskningsservice']['#disabled'] = TRUE;
		$form['field_other_coordinator']['#disabled'] = TRUE;
		$form['field_funding_organization']['#disabled'] = TRUE;
		$form['field_deadline']['#disabled'] = TRUE;
		$form['field_duration']['#disabled'] = TRUE;
		$form['field_total_budget_amount_for_co']['#disabled'] = TRUE;
		$form['field_total_budget_amount_for_ds']['#disabled'] = TRUE;
		$form['field_currency']['#disabled'] = TRUE;
		$form['field_co_financing_needed']['#disabled'] = TRUE;
		$form['field_co_financing_covered_by']['#disabled'] = TRUE;
		$form['field_percent_oh_costs_covered']['#disabled'] = TRUE;
	}

	// Lock Unit Head once he/she is OK
	if (isset($node->field_ok_from_unit_head) && $node->field_ok_from_unit_head['und'][0]['value']) {
		$form['field_unit_head']['#disabled'] = TRUE;
	}

	return true;
}

/**
 * Custom cancel button callback.
 */
function projprop_form_cancel($form, &$form_state) {
  $url = 'proposals';
  drupal_goto($url);
}

/**
* Implementation of hook_node_prepare().
**/
function projprop_edit_node_load($node) {
	$node_is_edited = strpos(request_path(), 'edit') !== FALSE;
	if ($node_is_edited) {
		$node[array_keys($node)[0]]->field_comment = NULL;
	}
}

/**
* Implementation of hook_node_presave().
**/
function projprop_edit_node_presave($node) {

	global $user;
	$user = user_load($user->uid);

	if ($node->field_comment['und']) {
		//$node->field_comment = NULL;
		$comment = $node->field_comment['und'][0]['value'];
		$date = format_date(time(), 'medium');
		$string_to_append = $user->realname . ' on ' .$date . ': ' . "\r\n" . $comment . "\r\n\r\n" . '----------------------' . "\r\n\r\n";
		$node->field_conversation['und'][0]['value'] = $string_to_append . (isset($node->field_conversation) ? $node->field_conversation['und'][0]['value'] : '');
	}

//var_dump($node->field_comments_to_unit_head);
//break;
	
/*
	if (isset($user->roles[5])) {
		// User is the vice head

	} else if (isset($user->roles[7])) {
		// User is the unit head
		$string_to_append = $user->realname . ' on ' .$date . ': ' . "\r\n" . $comment . "\r\n\r\n" . '----------------------' . "\r\n\r\n";
		$node->field_conversation_unit_head['und'][0]['value'] = $string_to_append . $node->field_conversation_unit_head['und'][0]['value'];
	} else if (isset($user->roles[8])) {
		// User is Economy
		$string_to_append = $user->realname . ' on ' .$date . ': ' . "\r\n" . $comment . "\r\n\r\n" . '----------------------' . "\r\n\r\n";
		$node->field_conversation_dsv_economy['und'][0]['value'] = $string_to_append . $node->field_conversation_dsv_economy['und'][0]['value'];

	}
*/

}

/**
* Implementation of hook_menu().
**/
function projprop_edit_menu() {
  $items['node/approve/%node'] = array(
    'page arguments' => array(1),
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
    'delivery callback' => 'projprop_edit_callback',  // Magic goes here
  );
  $items['node/cancel/%node'] = array(
  	'page arguments' => array(1),
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
    'delivery callback' => 'projprop_edit_callback',  // Magic goes here
  );
   $items['node/economy-own/%node'] = array(
    'page arguments' => array(1),
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
    'delivery callback' => 'projprop_edit_callback',  // Magic goes here
  );
  return $items;
}

function projprop_edit_callback($node) {
	global $user;
	$user = user_load($user->uid);
	$data = array(true);
	$node = node_load(arg(2));
	$approvalby = arg(3);
	$researcher = $node->field_dsv_person_in_charge[LANGUAGE_NONE][0]['uid'];

	// Only Proposal nodes are allowed!
	if ($node->type != 'project_proposal') {
		return t('Invalid node type!');
	}

	$node->field_comment = NULL;

	switch (arg(3)) {
		case 'own':
			$node->field_economy_owner[LANGUAGE_NONE][0]['uid'] = $user->uid;
			$data = $user->realname;
			break;
		case 'unown':
			$node->field_economy_owner[LANGUAGE_NONE][0]['uid'] = null;
			$data = 'not yet assigned';
			break;
		case 'cancel':
			$node->field_cancelled[LANGUAGE_NONE][0]['value'] = 1;
			break;
		case 'uncancel':
			$node->field_cancelled[LANGUAGE_NONE][0]['value'] = 0;
			break;
		case 'unit-head':
			if (!isset($user->roles[7]) && !isset($user->roles[3])) {
				drupal_json_output(false);
			}
			$node->field_ok_from_unit_head[LANGUAGE_NONE][0]['value'] = 1;
			break;
		/*
		case 'request-dsv-economy':
			if (!($user->uid == $researcher) && !isset($user->roles[3])) {
				drupal_json_output(false);
			}
			$node->field_request_to_dsv_economy[LANGUAGE_NONE][0]['value'] = 1;
			break;
			*/
		case 'dsv-economy':
			if (!isset($user->roles[8]) && !isset($user->roles[3])) {
				drupal_json_output(false);
			}
			$node->field_ok_from_dsv_economy[LANGUAGE_NONE][0]['value'] = 1;
			break;
		case 'request-vice-head':
			if (!($user->uid == $researcher) && (!isset($user->roles[3])) && (!isset($user->roles[5])) && (!isset($user->roles[6])) && (!isset($user->roles[7])) && (!isset($user->roles[8]))) {
				drupal_json_output(false);
			}
			$node->field_request_to_vice_head[LANGUAGE_NONE][0]['value'] = 1;
			break;
		case 'vice-head':
			if (!isset($user->roles[5]) && !isset($user->roles[3])) {
				drupal_json_output(false);
			}
			$node->field_ok_from_uno[LANGUAGE_NONE][0]['value'] = 1;
			break;
		case 'final':
			if (!($user->uid == $researcher) && !isset($user->roles[5]) && !isset($user->roles[3]) ) {
				drupal_json_output(false);
			}
			$node->field_sent_to_birgitta_o[LANGUAGE_NONE][0]['value'] = 1;
			break;
		default:
			break;
	}

	node_save($node);
	drupal_json_output($data);
}

/**
 * Implements hook_menu_alter().
 */
function projprop_edit_menu_alter(&$items) {
	// Hive 'View' tab on node edit view.
	$items['node/%node/edit']['type'] = MENU_CALLBACK;
}

/**
 * Implements hook_menu()
 * @author Simon Jarbrant (simon@dsv.su.se)
 */
/*
function projprop_edit_menu() {
	$items['edit/%node'] = array(
		'title' => 'ProjProp Edit',
		'page callback' => 'projprop_edit_page',
		'page arguments' => array(1),
		'access callback' => TRUE,
		// 'access arguments' => array('project proposal edit own content'),
	);

	return $items;
}
*/
/**
 * Delivery callback for /edit/nid
 */
/*
function projprop_edit_page($node) {
	// Only Proposal nodes are allowed!
	if ($node->type != 'project_proposal') {
		return t('Invalid node type!');
	}
	// Create associative array and send to drupal_json_output()
	$data = array();
	$data['edit-proposalform-proposal-edit-node'] = $node->nid;
	$data['edit-proposalform-proposal-title'] = $node->title;

	// Load the author
	if (isset($node->field_dsv_person_in_charge[LANGUAGE_NONE])) {
		$author = user_load($node->field_dsv_person_in_charge[LANGUAGE_NONE][0]['uid']);
		$data['edit-proposalform-proposal-dsv-person-in-charge'] = $author->name;
	} else {
		$data['edit-proposalform-proposal-dsv-person-in-charge'] = "";
	}

	// We only need the deadline date, which is the first 10 characters
	$data['edit-proposalform-proposal-deadline-datepicker-popup-0'] =
		substr($node->field_deadline[LANGUAGE_NONE][0]['value'], 0, 10);

	// Load "Duration" and "Is DSV coordinating"
	$data['edit-proposalform-proposal-duration'] = $node->field_duration[LANGUAGE_NONE][0]['value'];
	$data['edit-proposalform-proposal-is-dsv-coordinating'] =
		$node->field_is_dsv_coordinating[LANGUAGE_NONE][0]['value'];

	// Load "Other coordinator"
	if (isset($node->field_other_coordinator[LANGUAGE_NONE])) {
		$data['edit-proposalform-proposal-other-coordinator'] =
			$node->field_other_coordinator[LANGUAGE_NONE][0]['value'];
	} else {
		$data['edit-proposalform-proposal-other-coordinator'] = "";
	}

	// Load "Program/Call/Target"
	if (isset($node->field_program_call_target[LANGUAGE_NONE])) {
		$data['edit-proposalform-proposal-program-call-target'] =
			$node->field_program_call_target[LANGUAGE_NONE][0]['value'];
	} else {
		$data['edit-proposalform-proposal-program-call-target'] = "";
	}

	// Load "Co-financing needed"
	$data['edit-proposalform-proposal-co-financing-needed'] =
		$node->field_co_financing_needed[LANGUAGE_NONE][0]['value'];

	// Load "Co-financing covered by"
	if (isset($node->field_co_financing_covered_by[LANGUAGE_NONE])) {
		$data['edit-proposalform-proposal-co-financing-covered-by'] =
			$node->field_co_financing_covered_by[LANGUAGE_NONE][0]['value'];
	} else {
		$data['edit-proposalform-proposal-co-financing-covered-by'] = "";
	}

	// Load "Percent OH-costs sovered"
	if (isset($node->field_percent_oh_costs_covered[LANGUAGE_NONE])) {
		$data['edit-proposalform-proposal-percent-oh-costs-covered'] =
			$node->field_percent_oh_costs_covered[LANGUAGE_NONE][0]['value'];
	} else {
		$data['edit-proposalform-proposal-percent-oh-costs-covered'] = 0;
	}

	// Load the funding organisation
	if (isset($node->field_funding_organization[LANGUAGE_NONE])) {
		$organization =
			taxonomy_term_load($node->field_funding_organization[LANGUAGE_NONE][0]['tid']);
		$data['edit-proposalform-proposal-funding-organization'] = $organization->name;
	} else {
		$data['edit-proposalform-proposal-funding-organization'] = "";
	}

	// Load budgets
	if (isset($node->field_total_budget_amount_for_co[LANGUAGE_NONE])) {
		$data['edit-proposalform-proposal-total-budget-amount-for-co'] =
			$node->field_total_budget_amount_for_co[LANGUAGE_NONE][0]['value'];
	} else {
		$data['edit-proposalform-proposal-total-budget-amount-for-co'] = 0;
	}

	if (isset($node->field_total_budget_amount_for_ds[LANGUAGE_NONE])) {
		$data['edit-proposalform-proposal-total-budget-amount-for-ds'] =
			$node->field_total_budget_amount_for_ds[LANGUAGE_NONE][0]['value'];
	} else {
		$data['edit-proposalform-proposal-total-budget-amount-for-ds'] = 0;
	}

	// Load attachments
	if (isset($node->field_attachment_unit[LANGUAGE_NONE])) {
		if (!is_array($node->field_attachment_unit[LANGUAGE_NONE])) {
			$node->field_attachment_unit[LANGUAGE_NONE] = (array)$node->field_attachment_unit[LANGUAGE_NONE];
		}
		$files = array();
		foreach ($node->field_attachment_unit[LANGUAGE_NONE] as $key => $value) {
				$file = file_load($value['fid']);
				$uri = $file->uri;
				$url = file_create_url($uri);
				$filename = $file->filename;
				$files[] = array($filename, $url);
		}
		$data['edit-proposalform-proposal-attachment-unit-upload'] = $files;
	} else {
		$data['edit-proposalform-proposal-attachment-unit'] = 0;
	}

	// Load "Currency", "OK from DSV Economy", "Forskningsservice informed", "OK from Uno" and "Sent to Birgitta O"
	$data['edit-proposalform-proposal-currency'] =
		$node->field_currency[LANGUAGE_NONE][0]['value'];
	$data['edit-proposalform-proposal-ok-from-dsv-economy'] =
		$node->field_ok_from_dsv_economy[LANGUAGE_NONE][0]['value'];
	$data['edit-proposalform-proposal-forskningsservice-informed'] =
		$node->field_forskningsservice_informed[LANGUAGE_NONE][0]['value'];
	$data['edit-proposalform-proposal-ok-from-uno'] = $node->field_ok_from_uno[LANGUAGE_NONE][0]['value'];
	$data['edit-proposalform-proposal-ok-from-unit-head'] = $node->field_ok_from_unit_head[LANGUAGE_NONE][0]['value'];
	$data['edit-proposalform-proposal-sent-to-birgitta-o'] = $node->field_sent_to_birgitta_o[LANGUAGE_NONE][0]['value'];

	// Generate JSON and return to caller
	drupal_json_output($data);
}
*/